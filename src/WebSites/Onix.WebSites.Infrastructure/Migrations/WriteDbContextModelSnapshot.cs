// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Onix.WebSites.Infrastructure.DbContexts;

#nullable disable

namespace Onix.WebSites.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("website")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Onix.WebSites.Domain.Blocks.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<Guid?>("website_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Code", "Onix.WebSites.Domain.Blocks.Block.Code#Code", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(1500)
                                .HasColumnType("character varying(1500)")
                                .HasColumnName("code");
                        });

                    b.HasKey("Id");

                    b.HasIndex("website_id");

                    b.ToTable("block", "website");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("parentCategory_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("website_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Onix.WebSites.Domain.Categories.Category.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id");

                    b.HasIndex("parentCategory_id");

                    b.HasIndex("website_id");

                    b.ToTable("category", "website");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Schedules")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("schedules");

                    b.Property<Guid?>("website_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("LocationAddress", "Onix.WebSites.Domain.Locations.Location.LocationAddress#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Build")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("build");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("city");

                            b1.Property<string>("Index")
                                .HasMaxLength(6)
                                .HasColumnType("character varying(6)")
                                .HasColumnName("index");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LocationPhone", "Onix.WebSites.Domain.Locations.Location.LocationPhone#Phone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(25)
                                .HasColumnType("character varying(25)")
                                .HasColumnName("phone");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Onix.WebSites.Domain.Locations.Location.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id");

                    b.HasIndex("website_id");

                    b.ToTable("location", "website");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Media.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("product_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Path", "Onix.WebSites.Domain.Media.Photo.Path#Path", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("path");
                        });

                    b.HasKey("Id");

                    b.HasIndex("product_id");

                    b.ToTable("photo", "website");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("category_id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Onix.WebSites.Domain.Products.Product.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(800)
                                .HasColumnType("character varying(800)")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Link", "Onix.WebSites.Domain.Products.Product.Link#Link", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("link");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Onix.WebSites.Domain.Products.Product.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Onix.WebSites.Domain.Products.Product.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("price");
                        });

                    b.HasKey("Id");

                    b.HasIndex("category_id");

                    b.ToTable("product", "website");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.WebSites.WebSite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Faqs")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("faqs");

                    b.Property<string>("Favicon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("favicon");

                    b.Property<bool>("ShowStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("show_status");

                    b.Property<string>("SocialMedias")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("social_medias");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Onix.WebSites.Domain.WebSites.WebSite.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Url", "Onix.WebSites.Domain.WebSites.WebSite.Url#Url", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("url");
                        });

                    b.HasKey("Id");

                    b.ToTable("website", "website");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Blocks.Block", b =>
                {
                    b.HasOne("Onix.WebSites.Domain.WebSites.WebSite", null)
                        .WithMany("Blocks")
                        .HasForeignKey("website_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Categories.Category", b =>
                {
                    b.HasOne("Onix.WebSites.Domain.Categories.Category", "ParentCategory")
                        .WithMany("SubCategory")
                        .HasForeignKey("parentCategory_id");

                    b.HasOne("Onix.WebSites.Domain.WebSites.WebSite", null)
                        .WithMany("Categories")
                        .HasForeignKey("website_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Locations.Location", b =>
                {
                    b.HasOne("Onix.WebSites.Domain.WebSites.WebSite", null)
                        .WithMany("Locations")
                        .HasForeignKey("website_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Media.Photo", b =>
                {
                    b.HasOne("Onix.WebSites.Domain.Products.Product", null)
                        .WithMany("Photos")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Products.Product", b =>
                {
                    b.HasOne("Onix.WebSites.Domain.Categories.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("category_id");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.WebSites.WebSite", b =>
                {
                    b.OwnsOne("Onix.SharedKernel.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("WebSiteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("email");

                            b1.HasKey("WebSiteId");

                            b1.ToTable("website", "website");

                            b1.WithOwner()
                                .HasForeignKey("WebSiteId");
                        });

                    b.OwnsOne("Onix.SharedKernel.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("WebSiteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(25)
                                .HasColumnType("character varying(25)")
                                .HasColumnName("phone");

                            b1.HasKey("WebSiteId");

                            b1.ToTable("website", "website");

                            b1.WithOwner()
                                .HasForeignKey("WebSiteId");
                        });

                    b.OwnsOne("Onix.WebSites.Domain.Appearances.Appearance", "Appearance", b1 =>
                        {
                            b1.Property<Guid>("WebSiteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ButtonStyle")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("button_style");

                            b1.Property<string>("ColorScheme")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("color_scheme");

                            b1.Property<string>("Font")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("font");

                            b1.HasKey("WebSiteId");

                            b1.ToTable("website", "website");

                            b1.WithOwner()
                                .HasForeignKey("WebSiteId");
                        });

                    b.Navigation("Appearance")
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Categories.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.Products.Product", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Onix.WebSites.Domain.WebSites.WebSite", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Categories");

                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
